var Base32=function(){"use strict";class t{static toBytes(t){return ArrayBuffer.isView(t)&&(t=t.buffer),[new Uint8Array(t),!1,"bytes"]}}class e{static get typeList(){return["buffer","bytes","uint8","view"]}static getType(t){if(!e.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static compile(t,r){let i;return i="buffer"===(r=e.getType(r))?t.buffer:"view"===r?new DataView(t.buffer):t,i}}class r{static makeDataView(t){const e=new ArrayBuffer(t);return new DataView(e)}static floatingPoints(t,e=!1){const r=this.makeDataView(8);return r.setFloat64(0,t,e),r}static numbers(t,e=!1){let r,i;if(Number.isInteger(t)){if(i="int",!Number.isSafeInteger(t)){let e,r,i;throw t<0?(e=Number.MIN_SAFE_INTEGER,r="smaller",i="MIN"):(e=Number.MAX_SAFE_INTEGER,r="bigger",i="MAX"),new RangeError(`The provided integer is ${r} than ${i}_SAFE_INTEGER: '${e}'\nData integrity is not guaranteed. Use a BigInt to avoid this issue.\n(If you see this error although a float was provided, the input has to many digits before the decimal point to store the decimal places in a float with 64 bits.)`)}t<0?t<-2147483648?(r=this.makeDataView(8),r.setBigInt64(0,BigInt(t),e)):t<-32768?(r=this.makeDataView(4),r.setInt32(0,t,e)):(r=this.makeDataView(2),r.setInt16(0,t,e)):t>0?t>4294967295?(r=this.makeDataView(8),r.setBigUint64(0,BigInt(t),e)):t>65535?(r=this.makeDataView(4),r.setUint32(0,t,e)):(r=this.makeDataView(2),r.setInt16(0,t,e)):r=new Uint16Array([0])}else i="float",r=this.floatingPoints(t,e);return[new Uint8Array(r.buffer),i]}static bigInts(t,e=!1){const r=new Array,i=e?"push":"unshift",n=18446744073709551616n;if(t<0)for(;t<-9223372036854775808n;)r[i](t%n),t>>=64n;else for(;t>=n;)r[i](t%n),t>>=64n;r[i](t);const s=8*r.length,o=this.makeDataView(s);return r.forEach(((t,r)=>{const i=8*r;o.setBigUint64(i,t,e)})),new Uint8Array(o.buffer)}static toBytes(t,e){let r,i=!1,n="bytes";if(t instanceof ArrayBuffer)r=new Uint8Array(t.slice());else if(ArrayBuffer.isView(t))r=new Uint8Array(t.buffer.slice());else if("string"==typeof t||t instanceof String)r=(new TextEncoder).encode(t);else if("number"==typeof t){if(isNaN(t))throw new TypeError("Cannot proceed. Input is NaN.");if(t==1/0)throw new TypeError("Cannot proceed. Input is Infinity.");if(e.signed&&t<0&&(i=!0,t=-t),e.numberMode){const i=this.floatingPoints(t,e.littleEndian);r=new Uint8Array(i.buffer),n="float"}else[r,n]=this.numbers(t,e.littleEndian)}else if("bigint"==typeof t)e.signed&&t<0&&(i=!0,t*=-1n),r=this.bigInts(t,e.littleEndian),n="int";else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const i=new Array;for(const r of t)i.push(...this.toBytes(r,e)[0]);r=Uint8Array.from(i)}}return[r,i,n]}}const i=r,n=class{static get typeList(){return["bigint64","bigint_n","biguint64","buffer","bytes","float32","float64","float_n","int8","int16","int32","int_n","str","uint8","uint16","uint32","uint_n","view"]}static getType(t){if(!this.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static makeTypedArrayBuffer(t,e,r,i){const n=t.byteLength,s=(e-t.byteLength%e)%e,o=i&&n>1?255:0;let a=t;if(s){a=new Uint8Array(n+s),a.fill(o);const e=r?0:s;a.set(t,e)}return a.buffer}static makeTypedArray(t,e,r,i){let n;if("int16"===e||"uint16"===e){const s=this.makeTypedArrayBuffer(t,2,r,i);n="int16"===e?new Int16Array(s):new Uint16Array(s)}else if("int32"===e||"uint32"===e||"float32"===e){const s=this.makeTypedArrayBuffer(t,4,r,i);n="int32"===e?new Int32Array(s):"uint32"===e?new Uint32Array(s):new Float32Array(s)}else if("bigint64"===e||"biguint64"===e||"float64"===e){const s=this.makeTypedArrayBuffer(t,8,r,i);n="bigint64"===e?new BigInt64Array(s):"biguint64"===e?new BigUint64Array(s):new Float64Array(s)}return n}static compile(t,e,i=!1,n=!1){let s;if(e=this.getType(e),n){let n;if(n=e.match(/^float/)?-this.compile(t,"float_n",i):-this.compile(t,"uint_n",i),"float_n"===e)return n;t=r.toBytes(n,{littleEndian:i,numberMode:!1,signed:!1})[0]}if("buffer"===e)s=t.buffer;else if("bytes"===e||"uint8"===e)s=t;else if("int8"===e)s=new Int8Array(t.buffer);else if("view"===e)s=new DataView(t.buffer);else if("str"===e)s=(new TextDecoder).decode(t);else if("uint_n"===e||"int_n"===e||"bigint_n"===e){if(1===t.length){const e=this.makeTypedArrayBuffer(t,2,i,n);t=new Uint8Array(e)}i&&t.reverse();let r=0n;t.forEach((t=>r=(r<<8n)+BigInt(t))),"uint_n"!==e&&(r=BigInt.asIntN(8*t.length,r)),s="bigint_n"!==e&&r>=Number.MIN_SAFE_INTEGER&&r<=Number.MAX_SAFE_INTEGER?Number(r):r}else if("float_n"===e)if(t.length<=4){let e;e=4===t.length?t:this.makeTypedArray(t,"float32",!1,n);s=new DataView(e.buffer).getFloat32(0,i)}else{if(!(t.length<=8))throw new RangeError("The provided input is to complex to be converted into a floating point.");{let e;e=8===t.length?t:this.makeTypedArray(t,"float64",!1,n);s=new DataView(e.buffer).getFloat64(0,i)}}else if("number"===e){if(8!==t.length)throw new TypeError("Type mismatch. Cannot convert into number.");const e=new Float64Array(t.buffer);s=Number(e)}else s=this.makeTypedArray(t,e,i,n);return s}};class s extends TypeError{constructor(){super("The input is signed but the converter is not set to treat input as signed.\nYou can pass the string 'signed' to the decode function or when constructing the converter."),this.name="SignError"}}class o{constructor(t,e=!0){this.root=t,this.converterArgs={},"charsets"in t&&e&&this.#t()}setIOHandlers(t=i,e=n){this.inputHandler=t,this.outputHandler=e}#t(){this.root.addCharset=(t,e,r="",i=!0)=>{if("string"!=typeof t)throw new TypeError("The charset name must be a string.");const n=this.root.converter.radix;let s=n;if("string"==typeof e&&(e=[...e]),Array.isArray(e))s=e.length,e=new Set(e);else if(!(e instanceof Set))throw new TypeError("The charset must be one of the types:\n'str', 'set', 'array'.");if(e.size!==n)throw s===n?new Error("There were repetitive chars found in your charset. Make sure each char is unique."):new Error(`The length of the charset must be ${n}.`);e=[...e],this.root.charsets[t]=e,i&&console.info(`New charset '${t}' was added and is ready to use`)},this.root.setDefaultCharset=t=>{({version:t}=this.validateArgs([t])),this.root.version=t}}makeArgList(t){return t.map((t=>`'${t}'`)).join(", ")}toSignedStr(t,e){return t=t.replace(/^0+(?!$)/,""),e&&(t="-".concat(t)),t}extractSign(t){let e=!1;return"-"===t[0]&&(e=!0,t=t.slice(1)),[t,e]}invalidArgument(t,e,r,i){const n=i?"\n * valid declarations for IO handlers are 'bytesOnly', 'bytesIn', 'bytesOut'":"",s=this.root.isMutable.signed?"\n * pass 'signed' to disable, 'unsigned' to enable the use of the twos's complement for negative integers":"",o=this.root.isMutable.littleEndian?"\n * 'be' for big , 'le' for little endian byte order for case conversion":"",a=this.root.isMutable.padding?"\n * pass 'pad' to fill up, 'nopad' to not fill up the output with the particular padding":"",h=this.root.isMutable.upper?"\n * valid args for changing the encoded output case are 'upper' and 'lower'":"",l=`\n * valid args for the output type are ${this.makeArgList(r)}`,u=e?`\n * the options for version (charset) are: ${this.makeArgList(e)}`:"",c=Object.keys(this.converterArgs).length?`\n * converter specific args:\n   - ${(()=>Object.keys(this.converterArgs).map((t=>this.converterArgs[t].map((t=>`'${t}'`)).join(" and "))).join("\n   - "))()}`:"";throw new TypeError(`'${t}'\n\nInput parameters:${n}${s}${o}${a}${h}${l}${u}\n * valid args for integrity check are : 'integrity' and 'nointegrity'\n * 'number' for number-mode (converts every number into a Float64Array to keep the natural js number type)${c}\n\nTraceback:`)}validateArgs(r,s=!1){const o={integrity:this.root.integrity,littleEndian:this.root.littleEndian,numberMode:this.root.numberMode,outputType:this.root.outputType,padding:this.root.padding,signed:this.root.signed,upper:this.root.upper,version:this.root.version};for(const t in this.converterArgs)o[t]=this.root[t];if(!r.length)return s&&this.setIOHandlers(),o;const a=t=>!!r.includes(t)&&(r.splice(r.indexOf(t),1),!0),h=Object.prototype.hasOwnProperty.call(this.root,"charsets")?Object.keys(this.root.charsets):[],l={integrity:["nointegrity","integrity"],littleEndian:["be","le"],padding:["nopad","pad"],signed:["unsigned","signed"],upper:["lower","upper"],...this.converterArgs};if(s)if(a("bytes_only"))this.setIOHandlers(t,e);else{const r=a("bytes_in")?t:i,s=a("bytes_out")?e:n;this.setIOHandlers(r,s)}const u=this.outputHandler.typeList;if(a("number")&&(o.numberMode=!0,o.outputType="float_n"),r.forEach((t=>{if(t=String(t).toLowerCase(),h.includes(t))o.version=t;else if(u.includes(t))o.outputType=t;else{let e=!0;for(const r in l)if(l[r].includes(t)){if(e=!1,!this.root.isMutable[r])throw TypeError(`Argument '${t}' is not allowed for this type of converter.`);o[r]=Boolean(l[r].indexOf(t))}e&&this.invalidArgument(t,h,u,s)}})),o.padding&&o.signed&&(o.padding=!1,console.warn("Padding was set to false due to the signed conversion.")),s)for(const t in o)this.root[t]=o[t];return o}signError(){throw new s}}class a{constructor(t,e=null,r=null,i=0){this.radix=t,null!==e&&null!==r?(this.bsEnc=e,this.bsDec=r):[this.bsEnc,this.bsDec]=this.constructor.guessBS(t),this.decPadVal=i}static guessBS(t){let e=t<8?t:Math.ceil(256/t);for(;e>8&&!(e%8);)e/=8;let r=0;for(;8*r*Math.log(2)/Math.log(t)<e;)r++;return[r,Math.ceil(8*r*Math.log(2)/Math.log(t))]}encode(t,e,r=!1,i=null){let n=this.bsEnc;0===n&&(n=t.byteLength);let s="";const o=n?(n-t.length%n)%n:0,a=new Array(o).fill(0);let h;if(r?(t.reverse(),h=[...a,...t]):h=[...t,...a],10===this.radix){let t=0n;for(let e=0;e<n;e++)t=(t<<8n)+BigInt(h[e]);return[t.toString(),0]}for(let t=0,r=h.length;t<r;t+=n){let r=0n;for(let e=t;e<t+n;e++)r=(r<<8n)+BigInt(h[e]);const a=new Array;let l,u=r;for(;u>=this.radix;)[u,l]=this.divmod(u,this.radix),a.unshift(parseInt(l,10));for(a.unshift(parseInt(u,10));a.length<this.bsDec;)a.unshift(0);let c="";a.forEach((t=>c=c.concat(e[t]))),i&&(c=i(c,o)),s=s.concat(c)}return[s,o]}decode(t,e,r=[],i=!0,n=!1){if(!t)return new Uint8Array(0);let s=this.bsDec;const o=new Array;let a;if(Array.isArray(e)?[...t].forEach((t=>{const n=e.indexOf(t);if(n>-1)o.push(n);else if(i&&-1===r.indexOf(t))throw new TypeError(`Invalid input. Character: '${t}' is not part of the charset.`)})):[...t].forEach((t=>{if(t in e)o.push(e[t]);else if(i&&!(t in r))throw new TypeError(`Invalid input. Character: '${t}' is not part of the charset.`)})),0===s)s=o.length;else{a=(s-o.length%s)%s;const t=new Array(a).fill(this.decPadVal);n?o.unshift(...t):o.push(...t)}let h=new Array;for(let t=0,e=o.length;t<e;t+=s){let e=0n;for(let r=0;r<s;r++)e+=BigInt(o[t+r])*this.pow(s-1-r);const r=new Array;let i,n=e;for(;n>=256;)[n,i]=this.divmod(n,256),r.unshift(parseInt(i,10));for(r.unshift(parseInt(n,10));r.length<this.bsEnc;)r.unshift(0);h=h.concat(r)}if(n){if(h.length>1){for(;!h[0];)h.shift();h.length||h.push(0),h.reverse()}}else if(this.bsDec){const t=this.padChars(a);h.splice(h.length-t)}return Uint8Array.from(h)}padBytes(t){return Math.floor(t*this.bsDec/this.bsEnc)}padChars(t){return Math.ceil(t*this.bsEnc/this.bsDec)}pow(t){return BigInt(this.radix)**BigInt(t)}divmod(t,e){return[t,e]=[BigInt(t),BigInt(e)],[t/e,t%e]}}
/**
     * [BaseEx|Base32 Converter]{@link https://github.com/UmamiAppearance/BaseExJS/blob/main/src/converters/base-32.js}
     *
     * @version 0.5.0
     * @author UmamiAppearance [mail@umamiappearance.eu]
     * @license GPL-3.0
     */
return class extends class{constructor(t=!0){this.charsets={},this.hasSignedMode=!1,this.integrity=!0,this.littleEndian=!1,this.numberMode=!1,this.outputType="buffer",this.padding=!1,this.padChars={default:""},this.signed=!1,this.upper=null,t&&(this.utils=new o(this)),this.version="default",this.isMutable={integrity:!0,littleEndian:!1,padding:!1,signed:!1,upper:!1}}encode(t,e,r,...i){const n=this.utils.validateArgs(i);let s,o,a;[s,o,a]=this.utils.inputHandler.toBytes(t,n);let h=null;e&&(h=e(n));let[l,u]=this.converter.encode(s,this.charsets[n.version],n.littleEndian,h);return n.signed&&(l=this.utils.toSignedStr(l,o)),n.upper&&(l=l.toUpperCase()),r&&(l=r({inputBytes:s,output:l,settings:n,zeroPadding:u,type:a})),l}decode(t,e,r,...i){const n=this.utils.validateArgs(i);t=String(t);let s=!1;this.hasSignedMode&&([t,s]=this.utils.extractSign(t),s&&!n.signed&&this.utils.signError()),this.isMutable.upper&&(t=t.toLowerCase()),e&&(t=e({input:t,settings:n}));let o=this.converter.decode(t,this.charsets[n.version],this.padChars[n.version],n.integrity,n.littleEndian);return r&&(o=r({input:t,output:o,settings:n})),this.utils.outputHandler.compile(o,n.outputType,n.littleEndian,s)}}{constructor(...t){super(),this.charsets.crockford=[..."0123456789abcdefghjkmnpqrstvwxyz"],this.padChars.crockford="=",this.charsets.rfc3548=[..."abcdefghijklmnopqrstuvwxyz234567"],this.padChars.rfc3548="=",this.charsets.rfc4648=[..."0123456789abcdefghijklmnopqrstuv"],this.padChars.rfc4648="=",this.charsets.zbase32=[..."ybndrfg8ejkmcpqxot1uwisza345h769"],this.padChars.zbase32="=",this.converter=new a(32,5,8),this.hasSignedMode=!0,this.version="rfc4648",this.isMutable.littleEndian=!0,this.isMutable.padding=!0,this.isMutable.signed=!0,this.isMutable.upper=!0,this.utils.validateArgs(t,!0),this.padding=/rfc3548|rfc4648/.test(this.version),this.upper="crockford"===this.version}encode(t,...e){return super.encode(t,null,(t=>{let{output:e,settings:r,zeroPadding:i}=t;if(!r.littleEndian&&i){const t=this.converter.padBytes(i);e=e.slice(0,e.length-t),r.padding&&(e=e.concat(this.padChars[r.version].repeat(t)))}return e}),...e)}decode(t,...e){return super.decode(t,null,null,...e)}}}();
