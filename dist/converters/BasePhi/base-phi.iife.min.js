var BasePhi=function(){"use strict";class t{static toBytes(t){return ArrayBuffer.isView(t)&&(t=t.buffer),[new Uint8Array(t),!1,"bytes"]}}class e{static get typeList(){return["buffer","bytes","uint8","view"]}static getType(t){if(!e.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static compile(t,r){let n;return n="buffer"===(r=e.getType(r))?t.buffer:"view"===r?new DataView(t.buffer):t,n}}class r{static makeDataView(t){const e=new ArrayBuffer(t);return new DataView(e)}static floatingPoints(t,e=!1){const r=this.makeDataView(8);return r.setFloat64(0,t,e),r}static numbers(t,e=!1){let r,n;if(Number.isInteger(t)){if(n="int",!Number.isSafeInteger(t)){let e,r,n;throw t<0?(e=Number.MIN_SAFE_INTEGER,r="smaller",n="MIN"):(e=Number.MAX_SAFE_INTEGER,r="bigger",n="MAX"),new RangeError(`The provided integer is ${r} than ${n}_SAFE_INTEGER: '${e}'\nData integrity is not guaranteed. Use a BigInt to avoid this issue.\n(If you see this error although a float was provided, the input has to many digits before the decimal point to store the decimal places in a float with 64 bits.)`)}t<0?t<-2147483648?(r=this.makeDataView(8),r.setBigInt64(0,BigInt(t),e)):t<-32768?(r=this.makeDataView(4),r.setInt32(0,t,e)):(r=this.makeDataView(2),r.setInt16(0,t,e)):t>0?t>4294967295?(r=this.makeDataView(8),r.setBigUint64(0,BigInt(t),e)):t>65535?(r=this.makeDataView(4),r.setUint32(0,t,e)):(r=this.makeDataView(2),r.setInt16(0,t,e)):r=new Uint16Array([0])}else n="float",r=this.floatingPoints(t,e);return[new Uint8Array(r.buffer),n]}static bigInts(t,e=!1){const r=new Array,n=e?"push":"unshift",i=18446744073709551616n;if(t<0)for(;t<-9223372036854775808n;)r[n](t%i),t>>=64n;else for(;t>=i;)r[n](t%i),t>>=64n;r[n](t);const s=8*r.length,o=this.makeDataView(s);return r.forEach(((t,r)=>{const n=8*r;o.setBigUint64(n,t,e)})),new Uint8Array(o.buffer)}static toBytes(t,e){let r,n=!1,i="bytes";if(t instanceof ArrayBuffer)r=new Uint8Array(t.slice());else if(ArrayBuffer.isView(t))r=new Uint8Array(t.buffer.slice());else if("string"==typeof t||t instanceof String)r=(new TextEncoder).encode(t);else if("number"==typeof t){if(isNaN(t))throw new TypeError("Cannot proceed. Input is NaN.");if(t==1/0)throw new TypeError("Cannot proceed. Input is Infinity.");if(e.signed&&t<0&&(n=!0,t=-t),e.numberMode){const n=this.floatingPoints(t,e.littleEndian);r=new Uint8Array(n.buffer),i="float"}else[r,i]=this.numbers(t,e.littleEndian)}else if("bigint"==typeof t)e.signed&&t<0&&(n=!0,t*=-1n),r=this.bigInts(t,e.littleEndian),i="int";else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const n=new Array;for(const r of t)n.push(...this.toBytes(r,e)[0]);r=Uint8Array.from(n)}}return[r,n,i]}}const n=r,i=class{static get typeList(){return["bigint64","bigint_n","biguint64","buffer","bytes","float32","float64","float_n","int8","int16","int32","int_n","str","uint8","uint16","uint32","uint_n","view"]}static getType(t){if(!this.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static makeTypedArrayBuffer(t,e,r,n){const i=t.byteLength,s=(e-t.byteLength%e)%e,o=n&&i>1?255:0;let a=t;if(s){a=new Uint8Array(i+s),a.fill(o);const e=r?0:s;a.set(t,e)}return a.buffer}static makeTypedArray(t,e,r,n){let i;if("int16"===e||"uint16"===e){const s=this.makeTypedArrayBuffer(t,2,r,n);i="int16"===e?new Int16Array(s):new Uint16Array(s)}else if("int32"===e||"uint32"===e||"float32"===e){const s=this.makeTypedArrayBuffer(t,4,r,n);i="int32"===e?new Int32Array(s):"uint32"===e?new Uint32Array(s):new Float32Array(s)}else if("bigint64"===e||"biguint64"===e||"float64"===e){const s=this.makeTypedArrayBuffer(t,8,r,n);i="bigint64"===e?new BigInt64Array(s):"biguint64"===e?new BigUint64Array(s):new Float64Array(s)}return i}static compile(t,e,n=!1,i=!1){let s;if(e=this.getType(e),i){let i;if(i=e.match(/^float/)?-this.compile(t,"float_n",n):-this.compile(t,"uint_n",n),"float_n"===e)return i;t=r.toBytes(i,{littleEndian:n,numberMode:!1,signed:!1})[0]}if("buffer"===e)s=t.buffer;else if("bytes"===e||"uint8"===e)s=t;else if("int8"===e)s=new Int8Array(t.buffer);else if("view"===e)s=new DataView(t.buffer);else if("str"===e)s=(new TextDecoder).decode(t);else if("uint_n"===e||"int_n"===e||"bigint_n"===e){if(1===t.length){const e=this.makeTypedArrayBuffer(t,2,n,i);t=new Uint8Array(e)}n&&t.reverse();let r=0n;t.forEach((t=>r=(r<<8n)+BigInt(t))),"uint_n"!==e&&(r=BigInt.asIntN(8*t.length,r)),s="bigint_n"!==e&&r>=Number.MIN_SAFE_INTEGER&&r<=Number.MAX_SAFE_INTEGER?Number(r):r}else if("float_n"===e)if(t.length<=4){let e;e=4===t.length?t:this.makeTypedArray(t,"float32",!1,i);s=new DataView(e.buffer).getFloat32(0,n)}else{if(!(t.length<=8))throw new RangeError("The provided input is to complex to be converted into a floating point.");{let e;e=8===t.length?t:this.makeTypedArray(t,"float64",!1,i);s=new DataView(e.buffer).getFloat64(0,n)}}else if("number"===e){if(8!==t.length)throw new TypeError("Type mismatch. Cannot convert into number.");const e=new Float64Array(t.buffer);s=Number(e)}else s=this.makeTypedArray(t,e,n,i);return s}};class s extends TypeError{constructor(){super("The input is signed but the converter is not set to treat input as signed.\nYou can pass the string 'signed' to the decode function or when constructing the converter."),this.name="SignError"}}class o extends TypeError{constructor(t){super(`Invalid input. Character: '${t}' is not part of the charset.`),this.name="CharsetError"}}class a{constructor(t){this.root=t,this.converterArgs={},this.#t()}setIOHandlers(t=n,e=i){this.inputHandler=t,this.outputHandler=e}#t(){this.root.addCharset=(t,e,r=[],n=!0)=>{const i=(t,r,n)=>{if(0===n&&r.length)return console.warn(`This converter has no ${t}. The following argument was ignored:\n'${r}'`),[];let i=n;if("string"==typeof r&&(r=[...r]),Array.isArray(r))i=r.length,r=new Set(r);else if(!(r instanceof Set))throw new TypeError(`The ${t} must be one of the types:\n'str', 'set', 'array'."`);if(r.size===n)return[...r];if(i!==n)throw new Error(`Your ${t} has a length of ${i}. The converter requires a length of ${n}.`);{const r={};(e=[...e]).forEach((t=>{t in r?r[t]++:r[t]=1}));let i="";n<100&&(i=`${e.join("")}\n`,e.forEach((t=>{r[t]>1?i+="^":i+=" "})));const s=Object.keys(r).filter((t=>r[t]>1));throw new Error(`You have repetitive char(s) [ ${s.join(" | ")} ] in your ${t}. Make sure each character is unique.\n${i}`)}};if(this.root.frozenCharsets)throw new Error("The charsets of this converter cannot be changed.");if("string"!=typeof t)throw new TypeError("The charset name must be a string.");n&&t in this.root.charsets&&console.warn(`An existing charset with name ${t} will get replaced.`);const s=i("charset",e,this.root.converter.radix),o=i("padding set",r,this.root.padCharAmount);this.root.charsets[t]=s,o.length&&(this.root.padChars[t]=o),n&&console.info(`New charset '${t}' was added and is ready to use`)},this.root.setDefaultCharset=t=>{if(!(t in this.root.charsets)){const e=Object.keys(this.root.charsets).join("\n   * ");throw new TypeError(`Charset ${t} was not found. Available charsets are:\n   * ${e}`)}this.root.version=t}}#e(t){return t.map((t=>`'${t}'`)).join(", ")}toSignedStr(t,e){return t=t.replace(/^0+(?!$)/,""),e&&(t="-".concat(t)),t}extractSign(t){let e=!1;return"-"===t[0]&&(e=!0,t=t.slice(1)),[t,e]}#r(t,e,r,n){const i=n?"\n * valid declarations for IO handlers are 'bytesOnly', 'bytesIn', 'bytesOut'":"",s=this.root.isMutable.signed?"\n * pass 'signed' to disable, 'unsigned' to enable the use of the twos's complement for negative integers":"",o=this.root.isMutable.littleEndian?"\n * 'be' for big , 'le' for little endian byte order for case conversion":"",a=this.root.isMutable.padding?"\n * pass 'pad' to fill up, 'nopad' to not fill up the output with the particular padding":"",h=this.root.isMutable.upper?"\n * valid args for changing the encoded output case are 'upper' and 'lower'":"",u=`\n * valid args for the output type are ${this.#e(r)}`,l=e?`\n * the option(s) for version/charset are: ${this.#e(e)}`:"",c=Object.keys(this.converterArgs).length?`\n * converter specific args:\n   - ${(()=>Object.keys(this.converterArgs).map((t=>this.converterArgs[t].map((t=>`'${t}'`)).join(" and "))).join("\n   - "))()}`:"";throw new TypeError(`'${t}'\n\nParameters:${i}${s}${o}${a}${h}${u}${l}\n * valid args for integrity check are: 'integrity' and 'nointegrity'\n * 'number' for number-mode (converts every number into a Float64Array to keep the natural js number type)${c}\n\nTraceback:`)}validateArgs(r,s=!1){const o={decimalMode:this.root.decimalMode,integrity:this.root.integrity,littleEndian:this.root.littleEndian,numberMode:this.root.numberMode,options:this.root.options,outputType:this.root.outputType,padding:this.root.padding,signed:this.root.signed,upper:this.root.upper,version:this.root.version};for(const t in this.converterArgs)o[t]=this.root[t];if(!r.length)return s&&this.setIOHandlers(),o;const a=t=>!!r.includes(t)&&(r.splice(r.indexOf(t),1),!0),h=Object.keys(this.root.charsets),u={integrity:["nointegrity","integrity"],littleEndian:["be","le"],padding:["nopad","pad"],signed:["unsigned","signed"],upper:["lower","upper"],...this.converterArgs};if(s)if(a("bytes_only"))this.setIOHandlers(t,e);else{const r=a("bytes_in")?t:n,s=a("bytes_out")?e:i;this.setIOHandlers(r,s)}const l=this.outputHandler.typeList;if(a("number")?(o.numberMode=!0,o.outputType="float_n"):a("decimal")&&(o.decimalMode=!0,o.outputType="decimal"),r.forEach((t=>{if("object"!=typeof t)if(t=String(t).toLowerCase(),h.includes(t))o.version=t;else if(l.includes(t))o.outputType=t;else{let e=!0;for(const r in u)if(u[r].includes(t)){if(e=!1,!this.root.isMutable[r])throw TypeError(`Argument '${t}' is not allowed for this type of converter.`);o[r]=Boolean(u[r].indexOf(t))}e&&this.#r(t,h,l,s)}else o.options={...o.options,...t}})),o.padding&&o.signed&&(o.padding=!1,console.warn("Padding was set to false due to the signed conversion.")),s)for(const t in o)this.root[t]=o[t];return o}signError(){throw new s}wrapOutput(t,e=0){if(!e)return t;const r=new RegExp(`.{1,${e}}`,"gu");return t.match(r).join("\n")}normalizeInput(t,e=!1){return e?String(t):String(t).replace(/\n/g,"")}}class h{constructor(t,e=null,r=null,n=0){this.radix=t,null!==e&&null!==r?(this.bsEnc=e,this.bsDec=r):[this.bsEnc,this.bsDec]=this.constructor.guessBS(t),this.decPadVal=n}static guessBS(t){let e=t<8?t:Math.ceil(256/t);for(;e>8&&!(e%8);)e/=8;let r=0;for(;8*r*Math.log(2)/Math.log(t)<e;)r++;return[r,Math.ceil(8*r*Math.log(2)/Math.log(t))]}encode(t,e,r=!1,n=null){let i=this.bsEnc;0===i&&(i=t.byteLength);let s="";const o=i?(i-t.length%i)%i:0,a=new Array(o).fill(0);let h;if(r?(t.reverse(),h=[...a,...t]):h=[...t,...a],10===this.radix){let t=0n;for(let e=0;e<i;e++)t=(t<<8n)+BigInt(h[e]);return[t.toString(),0]}for(let t=0,r=h.length;t<r;t+=i){let r=0n;for(let e=t;e<t+i;e++)r=(r<<8n)+BigInt(h[e]);const a=new Array;let u,l=r;for(;l>=this.radix;)[l,u]=this.divmod(l,this.radix),a.unshift(parseInt(u,10));for(a.unshift(parseInt(l,10));a.length<this.bsDec;)a.unshift(0);let c="";a.forEach((t=>c=c.concat(e[t]))),n&&(c=n(c,o)),s=s.concat(c)}return[s,o]}decode(t,e,r=[],n=!0,i=!1){if(!t)return new Uint8Array(0);let s=this.bsDec;const a=new Array;let h;if([...t].forEach((t=>{const i=e.indexOf(t);if(i>-1)a.push(i);else if(n&&-1===r.indexOf(t))throw new o(t)})),0===s)s=a.length;else{h=(s-a.length%s)%s;const t=new Array(h).fill(this.decPadVal);i?a.unshift(...t):a.push(...t)}let u=new Array;for(let t=0,e=a.length;t<e;t+=s){let e=0n;for(let r=0;r<s;r++)e+=BigInt(a[t+r])*this.pow(s-1-r);const r=new Array;let n,i=e;for(;i>=256;)[i,n]=this.divmod(i,256),r.unshift(parseInt(n,10));for(r.unshift(parseInt(i,10));r.length<this.bsEnc;)r.unshift(0);u=u.concat(r)}if(i){if(u.length>1){for(;!u[0];)u.shift();u.length||u.push(0),u.reverse()}}else if(this.bsDec){const t=this.padChars(h);u.splice(u.length-t)}return Uint8Array.from(u)}padBytes(t){return Math.floor(t*this.bsDec/this.bsEnc)}padChars(t){return Math.ceil(t*this.bsEnc/this.bsDec)}pow(t){return BigInt(this.radix)**BigInt(t)}divmod(t,e){return[t,e]=[BigInt(t),BigInt(e)],[t/e,t%e]}}class u{constructor(t=!0){this.charsets={},this.decimalMode=!1,this.frozenCharsets=!1,this.hasSignedMode=!1,this.integrity=!0,this.littleEndian=!1,this.numberMode=!1,this.outputType="buffer",this.padding=!1,this.padCharAmount=0,this.padChars={},this.signed=!1,this.upper=null,t&&(this.utils=new a(this)),this.version="default",this.options={lineWrap:0},this.isMutable={integrity:!0,littleEndian:!1,padding:!1,signed:!1,upper:!1}}encode(t,e,r,...n){const i=this.utils.validateArgs(n);let[s,o,a]=this.utils.inputHandler.toBytes(t,i),h=null;e&&(h=e(i));let[u,l]=this.converter.encode(s,this.charsets[i.version],i.littleEndian,h);return i.signed&&(u=this.utils.toSignedStr(u,o)),i.upper&&(u=u.toUpperCase()),r&&(u=r({inputBytes:s,output:u,settings:i,zeroPadding:l,type:a})),this.utils.wrapOutput(u,i.options.lineWrap)}decode(t,e,r,n,...i){const s=this.utils.validateArgs(i);t=this.utils.normalizeInput(t,n);let o=!1;this.hasSignedMode&&([t,o]=this.utils.extractSign(t),o&&!s.signed&&this.utils.signError()),this.isMutable.upper&&(t=t.toLowerCase()),e&&(t=e({input:t,settings:s}));let a=this.converter.decode(t,this.charsets[s.version],this.padChars[s.version],s.integrity,s.littleEndian);return r&&(a=r({input:t,output:a,settings:s})),this.utils.outputHandler.compile(a,s.outputType,s.littleEndian,o)}}var l=1e6,c=1e6,f="[big.js] ",d=f+"Invalid ",p=d+"decimal places",g=f+"Division by zero",w={},y=void 0,b=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function m(t,e,r,n){var i=t.c;if(r===y&&(r=t.constructor.RM),0!==r&&1!==r&&2!==r&&3!==r)throw Error("[big.js] Invalid rounding mode");if(e<1)n=3===r&&(n||!!i[0])||0===e&&(1===r&&i[0]>=5||2===r&&(i[0]>5||5===i[0]&&(n||i[1]!==y))),i.length=1,n?(t.e=t.e-e+1,i[0]=1):i[0]=t.e=0;else if(e<i.length){if(n=1===r&&i[e]>=5||2===r&&(i[e]>5||5===i[e]&&(n||i[e+1]!==y||1&i[e-1]))||3===r&&(n||!!i[0]),i.length=e,n)for(;++i[--e]>9;)if(i[e]=0,0===e){++t.e,i.unshift(1);break}for(e=i.length;!i[--e];)i.pop()}return t}function v(t,e,r){var n=t.e,i=t.c.join(""),s=i.length;if(e)i=i.charAt(0)+(s>1?"."+i.slice(1):"")+(n<0?"e":"e+")+n;else if(n<0){for(;++n;)i="0"+i;i="0."+i}else if(n>0)if(++n>s)for(n-=s;n--;)i+="0";else n<s&&(i=i.slice(0,n)+"."+i.slice(n));else s>1&&(i=i.charAt(0)+"."+i.slice(1));return t.s<0&&r?"-"+i:i}w.abs=function(){var t=new this.constructor(this);return t.s=1,t},w.cmp=function(t){var e,r=this,n=r.c,i=(t=new r.constructor(t)).c,s=r.s,o=t.s,a=r.e,h=t.e;if(!n[0]||!i[0])return n[0]?s:i[0]?-o:0;if(s!=o)return s;if(e=s<0,a!=h)return a>h^e?1:-1;for(o=(a=n.length)<(h=i.length)?a:h,s=-1;++s<o;)if(n[s]!=i[s])return n[s]>i[s]^e?1:-1;return a==h?0:a>h^e?1:-1},w.div=function(t){var e=this,r=e.constructor,n=e.c,i=(t=new r(t)).c,s=e.s==t.s?1:-1,o=r.DP;if(o!==~~o||o<0||o>l)throw Error(p);if(!i[0])throw Error(g);if(!n[0])return t.s=s,t.c=[t.e=0],t;var a,h,u,c,f,d=i.slice(),w=a=i.length,b=n.length,v=n.slice(0,a),E=v.length,A=t,T=A.c=[],I=0,M=o+(A.e=e.e-t.e)+1;for(A.s=s,s=M<0?0:M,d.unshift(0);E++<a;)v.push(0);do{for(u=0;u<10;u++){if(a!=(E=v.length))c=a>E?1:-1;else for(f=-1,c=0;++f<a;)if(i[f]!=v[f]){c=i[f]>v[f]?1:-1;break}if(!(c<0))break;for(h=E==a?i:d;E;){if(v[--E]<h[E]){for(f=E;f&&!v[--f];)v[f]=9;--v[f],v[E]+=10}v[E]-=h[E]}for(;!v[0];)v.shift()}T[I++]=c?u:++u,v[0]&&c?v[E]=n[w]||0:v=[n[w]]}while((w++<b||v[0]!==y)&&s--);return T[0]||1==I||(T.shift(),A.e--,M--),I>M&&m(A,M,r.RM,v[0]!==y),A},w.eq=function(t){return 0===this.cmp(t)},w.gt=function(t){return this.cmp(t)>0},w.gte=function(t){return this.cmp(t)>-1},w.lt=function(t){return this.cmp(t)<0},w.lte=function(t){return this.cmp(t)<1},w.minus=w.sub=function(t){var e,r,n,i,s=this,o=s.constructor,a=s.s,h=(t=new o(t)).s;if(a!=h)return t.s=-h,s.plus(t);var u=s.c.slice(),l=s.e,c=t.c,f=t.e;if(!u[0]||!c[0])return c[0]?t.s=-h:u[0]?t=new o(s):t.s=1,t;if(a=l-f){for((i=a<0)?(a=-a,n=u):(f=l,n=c),n.reverse(),h=a;h--;)n.push(0);n.reverse()}else for(r=((i=u.length<c.length)?u:c).length,a=h=0;h<r;h++)if(u[h]!=c[h]){i=u[h]<c[h];break}if(i&&(n=u,u=c,c=n,t.s=-t.s),(h=(r=c.length)-(e=u.length))>0)for(;h--;)u[e++]=0;for(h=e;r>a;){if(u[--r]<c[r]){for(e=r;e&&!u[--e];)u[e]=9;--u[e],u[r]+=10}u[r]-=c[r]}for(;0===u[--h];)u.pop();for(;0===u[0];)u.shift(),--f;return u[0]||(t.s=1,u=[f=0]),t.c=u,t.e=f,t},w.mod=function(t){var e,r=this,n=r.constructor,i=r.s,s=(t=new n(t)).s;if(!t.c[0])throw Error(g);return r.s=t.s=1,e=1==t.cmp(r),r.s=i,t.s=s,e?new n(r):(i=n.DP,s=n.RM,n.DP=n.RM=0,r=r.div(t),n.DP=i,n.RM=s,this.minus(r.times(t)))},w.neg=function(){var t=new this.constructor(this);return t.s=-t.s,t},w.plus=w.add=function(t){var e,r,n,i=this,s=i.constructor;if(t=new s(t),i.s!=t.s)return t.s=-t.s,i.minus(t);var o=i.e,a=i.c,h=t.e,u=t.c;if(!a[0]||!u[0])return u[0]||(a[0]?t=new s(i):t.s=i.s),t;if(a=a.slice(),e=o-h){for(e>0?(h=o,n=u):(e=-e,n=a),n.reverse();e--;)n.push(0);n.reverse()}for(a.length-u.length<0&&(n=u,u=a,a=n),e=u.length,r=0;e;a[e]%=10)r=(a[--e]=a[e]+u[e]+r)/10|0;for(r&&(a.unshift(r),++h),e=a.length;0===a[--e];)a.pop();return t.c=a,t.e=h,t},w.pow=function(t){var e=this,r=new e.constructor("1"),n=r,i=t<0;if(t!==~~t||t<-1e6||t>c)throw Error(d+"exponent");for(i&&(t=-t);1&t&&(n=n.times(e)),t>>=1;)e=e.times(e);return i?r.div(n):n},w.prec=function(t,e){if(t!==~~t||t<1||t>l)throw Error(d+"precision");return m(new this.constructor(this),t,e)},w.round=function(t,e){if(t===y)t=0;else if(t!==~~t||t<-l||t>l)throw Error(p);return m(new this.constructor(this),t+this.e+1,e)},w.sqrt=function(){var t,e,r,n=this,i=n.constructor,s=n.s,o=n.e,a=new i("0.5");if(!n.c[0])return new i(n);if(s<0)throw Error(f+"No square root");0===(s=Math.sqrt(n+""))||s===1/0?((e=n.c.join("")).length+o&1||(e+="0"),o=((o+1)/2|0)-(o<0||1&o),t=new i(((s=Math.sqrt(e))==1/0?"5e":(s=s.toExponential()).slice(0,s.indexOf("e")+1))+o)):t=new i(s+""),o=t.e+(i.DP+=4);do{r=t,t=a.times(r.plus(n.div(r)))}while(r.c.slice(0,o).join("")!==t.c.slice(0,o).join(""));return m(t,(i.DP-=4)+t.e+1,i.RM)},w.times=w.mul=function(t){var e,r=this,n=r.constructor,i=r.c,s=(t=new n(t)).c,o=i.length,a=s.length,h=r.e,u=t.e;if(t.s=r.s==t.s?1:-1,!i[0]||!s[0])return t.c=[t.e=0],t;for(t.e=h+u,o<a&&(e=i,i=s,s=e,u=o,o=a,a=u),e=new Array(u=o+a);u--;)e[u]=0;for(h=a;h--;){for(a=0,u=o+h;u>h;)a=e[u]+s[h]*i[u-h-1]+a,e[u--]=a%10,a=a/10|0;e[u]=a}for(a?++t.e:e.shift(),h=e.length;!e[--h];)e.pop();return t.c=e,t},w.toExponential=function(t,e){var r=this,n=r.c[0];if(t!==y){if(t!==~~t||t<0||t>l)throw Error(p);for(r=m(new r.constructor(r),++t,e);r.c.length<t;)r.c.push(0)}return v(r,!0,!!n)},w.toFixed=function(t,e){var r=this,n=r.c[0];if(t!==y){if(t!==~~t||t<0||t>l)throw Error(p);for(t=t+(r=m(new r.constructor(r),t+r.e+1,e)).e+1;r.c.length<t;)r.c.push(0)}return v(r,!1,!!n)},w[Symbol.for("nodejs.util.inspect.custom")]=w.toJSON=w.toString=function(){var t=this,e=t.constructor;return v(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},w.toNumber=function(){var t=Number(v(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(f+"Imprecise conversion");return t},w.toPrecision=function(t,e){var r=this,n=r.constructor,i=r.c[0];if(t!==y){if(t!==~~t||t<1||t>l)throw Error(d+"precision");for(r=m(new n(r),t,e);r.c.length<t;)r.c.push(0)}return v(r,t<=r.e||r.e<=n.NE||r.e>=n.PE,!!i)},w.valueOf=function(){var t=this,e=t.constructor;if(!0===e.strict)throw Error(f+"valueOf disallowed");return v(t,t.e<=e.NE||t.e>=e.PE,!0)};var E=function t(){function e(r){var n=this;if(!(n instanceof e))return r===y?t():new e(r);if(r instanceof e)n.s=r.s,n.e=r.e,n.c=r.c.slice();else{if("string"!=typeof r){if(!0===e.strict&&"bigint"!=typeof r)throw TypeError(d+"value");r=0===r&&1/r<0?"-0":String(r)}!function(t,e){var r,n,i;if(!b.test(e))throw Error(d+"number");t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(r=e.indexOf("."))>-1&&(e=e.replace(".",""));(n=e.search(/e/i))>0?(r<0&&(r=n),r+=+e.slice(n+1),e=e.substring(0,n)):r<0&&(r=e.length);for(i=e.length,n=0;n<i&&"0"==e.charAt(n);)++n;if(n==i)t.c=[t.e=0];else{for(;i>0&&"0"==e.charAt(--i););for(t.e=r-n-1,t.c=[],r=0;n<=i;)t.c[r++]=+e.charAt(n++)}}(n,r)}n.constructor=e}return e.prototype=w,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=false,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();
/**
     * [BaseEx|BasePhi Converter]{@link https://github.com/UmamiAppearance/BaseExJS/blob/main/src/converters/base-phi.js}
     *
     * @version 0.5.0
     * @author UmamiAppearance [mail@umamiappearance.eu]
     * @license GPL-3.0
     */return class extends u{#n=E("1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752");constructor(...t){super(),this.converter={radix:2,bsEnc:0,bsDec:0},this.b10=new h(10,0,0),this.charsets.default=["0","1"],this.version="default",this.signed=!0,this.utils.validateArgs(t,!0),this.isMutable.integrity=!1}encode(t,...e){const r=this.utils.validateArgs(e),n=this.charsets[r.version];let i,s,o,a="";if(r.decimalMode){if(!Number.isFinite(t))throw new TypeError("When running the converter in 'decimalMode' only input of type Number is allowed.");t<0?(s=!0,o=E(-t)):(s=!1,o=E(t))}else[i,s]=this.utils.inputHandler.toBytes(t,r),o=E(this.b10.encode(i,null,r.littleEndian)[0]);if(o.eq(0)||o.eq(1))return a=n[o.toNumber()],s&&(a=`-${a}`),a;const h=[],u=[];let l=E(1),c=this.#n,f=0;for(;c.lt(o);)[l,c]=this.#i(l,c),f++;const d=(t,e,r)=>{if(this.#s(o))console.warn(0);else{for(;t.gt(o);){if([t,e]=this.#o(t,e),t.lte(0))return void console.warn("below 0");r--}r>-1?h.unshift(r):u.push(r),o=o.minus(t),d(t,e,r)}};return d(l,c,f),f=0,h.forEach((t=>{for(;f<t;)a=`${n[0]}${a}`,f++;a=`${n[1]}${a}`,f++})),a?a+=".":a="0.",f=-1,u.forEach((t=>{for(;f>t;)a+=n[0],f--;a+=n[1],f--})),s&&(a=`-${a}`),a}decode(t,...e){const r=this.utils.validateArgs(e),n=this.charsets[r.version];let i;[t,i]=this.utils.extractSign(this.utils.normalizeInput(t));const[s,a]=t.split(".");let h=E(0),u=this.#n.minus(1),l=E(1);if([...s].reverse().forEach((t=>{const e=n.indexOf(t);if(1===e)h=h.plus(l);else if(0!==e)throw new o(t);[u,l]=this.#i(u,l)})),a){let t=E(1);l=this.#n.minus(t),[...a].forEach((e=>{const r=n.indexOf(e);if(1===r)h=h.plus(l);else if(0!==r)throw new o(e);[l,t]=this.#o(l,t)}))}if(r.decimalMode)return h.toNumber();h=h.round().toFixed();const c=this.b10.decode(h,[..."0123456789"],[],r.integrity,r.littleEndian);return this.utils.outputHandler.compile(c,r.outputType,r.littleEndian,i)}#s(t){return!t.round(50).abs().toNumber()}#i(t,e){return[e,t.plus(e)]}#o(t,e){return[e.minus(t),t]}}}();
