class e{static makeDataView(e){const t=new ArrayBuffer(e);return new DataView(t)}static floatingPoints(t,n=!1){const i=e.makeDataView(8);return i.setFloat64(0,t,n),i}static numbers(t,n=!1){let i,r;if(Number.isInteger(t)){if(r="int",!Number.isSafeInteger(t)){let e,n,i;throw t<0?(e=Number.MIN_SAFE_INTEGER,n="smaller",i="MIN"):(e=Number.MAX_SAFE_INTEGER,n="bigger",i="MAX"),new RangeError(`The provided integer is ${n} than ${i}_SAFE_INTEGER: '${e}'\nData integrity is not guaranteed. Use a BigInt to avoid this issue.\n(If you see this error although a float was provided, the input has to many digits before the decimal point to store the decimal places in a float with 64 bits.)`)}t<0?t<-2147483648?(i=e.makeDataView(8),i.setBigInt64(0,BigInt(t),n)):t<-32768?(i=e.makeDataView(4),i.setInt32(0,t,n)):(i=e.makeDataView(2),i.setInt16(0,t,n)):t>0?t>4294967295?(i=e.makeDataView(8),i.setBigUint64(0,BigInt(t),n)):t>65535?(i=e.makeDataView(4),i.setUint32(0,t,n)):(i=e.makeDataView(2),i.setInt16(0,t,n)):i=new Uint16Array([0])}else r="float",i=e.floatingPoints(t,n);return[new Uint8Array(i.buffer),r]}static bigInts(t,n=!1){const i=new Array,r=n?"push":"unshift",a=18446744073709551616n;if(t<0)for(;t<-9223372036854775808n;)i[r](t%a),t>>=64n;else for(;t>=a;)i[r](t%a),t>>=64n;i[r](t);const s=8*i.length,o=e.makeDataView(s);return i.forEach(((e,t)=>{const i=8*t;o.setBigUint64(i,e,n)})),new Uint8Array(o.buffer)}static toBytes(t,n){let i,r=!1,a="bytes";if(t instanceof ArrayBuffer)i=new Uint8Array(t);else if(ArrayBuffer.isView(t))i=new Uint8Array(t.buffer);else if("string"==typeof t||t instanceof String)i=(new TextEncoder).encode(t);else if("number"==typeof t){if(isNaN(t))throw new TypeError("Cannot proceed. Input is NaN.");if(t==1/0)throw new TypeError("Cannot proceed. Input is Infinity.");if(n.signed&&t<0&&(r=!0,t=-t),n.numberMode){const r=e.floatingPoints(t,n.littleEndian);i=new Uint8Array(r.buffer),a="float"}else[i,a]=e.numbers(t,n.littleEndian)}else if("bigint"==typeof t)n.signed&&t<0&&(r=!0,t*=-1n),i=e.bigInts(t,n.littleEndian),a="int";else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const n=new Array;for(const i of t)n.push(...e.toBytes(i));i=Uint8Array.from(n)}}return[i,r,a]}}class t{static get typeList(){return["bigint64","bigint_n","biguint64","buffer","bytes","float32","float64","float_n","int8","int16","int32","int_n","str","uint8","uint16","uint32","uint_n","view"]}static getType(e){if(!t.typeList.includes(e))throw new TypeError(`Unknown output type: '${e}'`);return e}static makeTypedArrayBuffer(e,t,n){const i=e.byteLength,r=(t-e.byteLength%t)%t;let a=e;if(r){a=new Uint8Array(i+r);const t=n?r:0;a.set(e,t)}return a.buffer}static makeTypedArray(e,n,i){let r;if("int16"===n||"uint16"===n){const a=t.makeTypedArrayBuffer(e,2,i);r="int16"===n?new Int16Array(a):new Uint16Array(a)}else if("int32"===n||"uint32"===n||"float32"===n){const a=t.makeTypedArrayBuffer(e,4,i);r="int32"===n?new Int32Array(a):"uint32"===n?new Uint32Array(a):new Float32Array(a)}else if("bigint64"===n||"biguint64"===n||"float64"===n){const a=t.makeTypedArrayBuffer(e,8,i);r="bigint64"===n?new BigInt64Array(a):"biguint64"===n?new BigUint64Array(a):new Float64Array(a)}return r}static compile(e,n,i=!1,r=!1){let a;if("buffer"===(n=t.getType(n)))a=e.buffer;else if("bytes"===n||"uint8"===n)a=e;else if("int8"===n)a=new Int8Array(e.buffer);else if("view"===n)a=new DataView(e.buffer);else if("str"===n)a=(new TextDecoder).decode(e);else if("uint_n"===n||"int_n"===n||"bigint_n"===n){i&&e.reverse();let t=0n;e.forEach((e=>t=(t<<8n)+BigInt(e))),"int_n"===n&&(t=BigInt.asIntN(8*e.length,t)),a="bigint_n"!==n&&t>=Number.MIN_SAFE_INTEGER&&t<=Number.MAX_SAFE_INTEGER?Number(t):t,r&&(a=-a)}else if("float_n"===n)if(e.length<=4){let n;n=4===e.length?e:t.makeTypedArray(e,"float32",!1);a=new DataView(n.buffer).getFloat32(0,i)}else{if(!(e.length<=8))throw new RangeError("The provided input is to complex to be converted into a floating point.");{let n;n=8===e.length?e:t.makeTypedArray(e,"float64",!1);a=new DataView(n.buffer).getFloat64(0,i)}}else if("number"===n){if(8!==e.length)throw new TypeError("Type mismatch. Cannot convert into number.");const t=new Float64Array(e.buffer);a=Number(t)}else a=t.makeTypedArray(e,n,i);return a}}class n{constructor(){this.converter={encode:e.toBytes,decode:t.compile},this.littleEndian=!0,this.numberMode=!1,this.outputType="buffer",this.utils={validateArgs:(e,n=!1)=>{const i={littleEndian:this.littleEndian,numberMode:this.numberMode,outputType:this.outputType,signed:!1};if(!e.length)return i;e.includes("number")&&(e.splice(e.indexOf("number"),1),i.numberMode=!0,i.outputType="float_n");const r=t.typeList.map((e=>`'${e}'`)).join(", ");if(e.forEach((e=>{if("le"===(e=String(e).toLowerCase()))i.littleEndian=!0;else if("be"===e)i.littleEndian=!1;else{if(!t.typeList.includes(e))throw new TypeError(`Invalid argument: '${e}.\nValid arguments are:\n'le', 'be', ${r}`);i.outputType=e}})),n)for(const e in i)this.root[e]=i[e];return i}}}encode(e,...t){const n=this.utils.validateArgs(t);return this.converter.encode(e,n)[0]}decode(e,...t){const n=this.utils.validateArgs(t);return this.converter.decode(e,n.outputType,n.littleEndian)}}export{n as ByteConverter};
