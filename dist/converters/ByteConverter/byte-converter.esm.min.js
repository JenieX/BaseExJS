class t{static makeDataView(t){const e=new ArrayBuffer(t);return new DataView(e)}static floatingPoints(t,e=!1){const i=this.makeDataView(8);return i.setFloat64(0,t,e),i}static numbers(t,e=!1){let i,n;if(Number.isInteger(t)){if(n="int",!Number.isSafeInteger(t)){let e,i,n;throw t<0?(e=Number.MIN_SAFE_INTEGER,i="smaller",n="MIN"):(e=Number.MAX_SAFE_INTEGER,i="bigger",n="MAX"),new RangeError(`The provided integer is ${i} than ${n}_SAFE_INTEGER: '${e}'\nData integrity is not guaranteed. Use a BigInt to avoid this issue.\n(If you see this error although a float was provided, the input has to many digits before the decimal point to store the decimal places in a float with 64 bits.)`)}t<0?t<-2147483648?(i=this.makeDataView(8),i.setBigInt64(0,BigInt(t),e)):t<-32768?(i=this.makeDataView(4),i.setInt32(0,t,e)):(i=this.makeDataView(2),i.setInt16(0,t,e)):t>0?t>4294967295?(i=this.makeDataView(8),i.setBigUint64(0,BigInt(t),e)):t>65535?(i=this.makeDataView(4),i.setUint32(0,t,e)):(i=this.makeDataView(2),i.setInt16(0,t,e)):i=new Uint16Array([0])}else n="float",i=this.floatingPoints(t,e);return[new Uint8Array(i.buffer),n]}static bigInts(t,e=!1){const i=new Array,n=e?"push":"unshift",r=18446744073709551616n;if(t<0)for(;t<-9223372036854775808n;)i[n](t%r),t>>=64n;else for(;t>=r;)i[n](t%r),t>>=64n;i[n](t);const a=8*i.length,s=this.makeDataView(a);return i.forEach(((t,i)=>{const n=8*i;s.setBigUint64(n,t,e)})),new Uint8Array(s.buffer)}static toBytes(t,e){let i,n=!1,r="bytes";if(t instanceof ArrayBuffer)i=new Uint8Array(t.slice());else if(ArrayBuffer.isView(t))i=new Uint8Array(t.buffer.slice());else if("string"==typeof t||t instanceof String)i=(new TextEncoder).encode(t);else if("number"==typeof t){if(isNaN(t))throw new TypeError("Cannot proceed. Input is NaN.");if(t==1/0)throw new TypeError("Cannot proceed. Input is Infinity.");if(e.signed&&t<0&&(n=!0,t=-t),e.numberMode){const n=this.floatingPoints(t,e.littleEndian);i=new Uint8Array(n.buffer),r="float"}else[i,r]=this.numbers(t,e.littleEndian)}else if("bigint"==typeof t)e.signed&&t<0&&(n=!0,t*=-1n),i=this.bigInts(t,e.littleEndian),r="int";else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const n=new Array;for(const i of t)n.push(...this.toBytes(i,e)[0]);i=Uint8Array.from(n)}}return[i,n,r]}}class e{static get typeList(){return["bigint64","bigint_n","biguint64","buffer","bytes","float32","float64","float_n","int8","int16","int32","int_n","str","uint8","uint16","uint32","uint_n","view"]}static getType(t){if(!this.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static makeTypedArrayBuffer(t,e,i,n){const r=t.byteLength,a=(e-t.byteLength%e)%e,s=n&&r>1?255:0;let o=t;if(a){o=new Uint8Array(r+a),o.fill(s);const e=i?0:a;o.set(t,e)}return o.buffer}static makeTypedArray(t,e,i,n){let r;if("int16"===e||"uint16"===e){const a=this.makeTypedArrayBuffer(t,2,i,n);r="int16"===e?new Int16Array(a):new Uint16Array(a)}else if("int32"===e||"uint32"===e||"float32"===e){const a=this.makeTypedArrayBuffer(t,4,i,n);r="int32"===e?new Int32Array(a):"uint32"===e?new Uint32Array(a):new Float32Array(a)}else if("bigint64"===e||"biguint64"===e||"float64"===e){const a=this.makeTypedArrayBuffer(t,8,i,n);r="bigint64"===e?new BigInt64Array(a):"biguint64"===e?new BigUint64Array(a):new Float64Array(a)}return r}static compile(e,i,n=!1,r=!1){let a;if(i=this.getType(i),r){let r;if(r=i.match(/^float/)?-this.compile(e,"float_n",n):-this.compile(e,"uint_n",n),"float_n"===i)return r;e=t.toBytes(r,{littleEndian:n,numberMode:!1,signed:!1})[0]}if("buffer"===i)a=e.buffer;else if("bytes"===i||"uint8"===i)a=e;else if("int8"===i)a=new Int8Array(e.buffer);else if("view"===i)a=new DataView(e.buffer);else if("str"===i)a=(new TextDecoder).decode(e);else if("uint_n"===i||"int_n"===i||"bigint_n"===i){if(1===e.length){const t=this.makeTypedArrayBuffer(e,2,n,r);e=new Uint8Array(t)}n&&e.reverse();let t=0n;e.forEach((e=>t=(t<<8n)+BigInt(e))),"uint_n"!==i&&(t=BigInt.asIntN(8*e.length,t)),a="bigint_n"!==i&&t>=Number.MIN_SAFE_INTEGER&&t<=Number.MAX_SAFE_INTEGER?Number(t):t}else if("float_n"===i)if(e.length<=4){let t;t=4===e.length?e:this.makeTypedArray(e,"float32",!1,r);a=new DataView(t.buffer).getFloat32(0,n)}else{if(!(e.length<=8))throw new RangeError("The provided input is to complex to be converted into a floating point.");{let t;t=8===e.length?e:this.makeTypedArray(e,"float64",!1,r);a=new DataView(t.buffer).getFloat64(0,n)}}else if("number"===i){if(8!==e.length)throw new TypeError("Type mismatch. Cannot convert into number.");const t=new Float64Array(e.buffer);a=Number(t)}else a=this.makeTypedArray(e,i,n,r);return a}}
/**
 * [BaseEx|Byte Converter]{@link https://github.com/UmamiAppearance/BaseExJS/blob/main/src/converters/byte-converter.js}
 *
 * @version 0.4.3
 * @author UmamiAppearance [mail@umamiappearance.eu]
 * @license GPL-3.0
 */class i{constructor(...t){this.littleEndian=!0,this.numberMode=!1,this.outputType="buffer",this.utils={validateArgs:(t,i=!1)=>{const n={littleEndian:this.littleEndian,numberMode:this.numberMode,outputType:this.outputType,signed:!1};if(!t.length)return n;t.includes("number")&&(t.splice(t.indexOf("number"),1),n.numberMode=!0,n.outputType="float_n");const r=e.typeList.map((t=>`'${t}'`)).join(", ");if(t.forEach((t=>{if("le"===(t=String(t).toLowerCase()))n.littleEndian=!0;else if("be"===t)n.littleEndian=!1;else{if(!e.typeList.includes(t))throw new TypeError(`Invalid argument: '${t}.\nValid arguments are:\n'le', 'be', ${r}`);n.outputType=t}})),i)for(const t in n)this[t]=n[t];return n}},this.utils.validateArgs(t,!0)}encode(e,...i){const n=this.utils.validateArgs(i);return t.toBytes(e,n)[0]}decode(t,...i){const n=this.utils.validateArgs(i);return e.compile(t,n.outputType,n.littleEndian)}}export{i as default};
