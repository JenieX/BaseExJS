var Base58=function(t){"use strict";class e{constructor(t,e=null,r=null,n=0){this.radix=t,null!==e&&null!==r?(this.bsEnc=e,this.bsDec=r):[this.bsEnc,this.bsDec]=this.constructor.calcBS(t),this.decPadVal=n}static calcBS(t){let e=t<8?t:Math.ceil(256/t);for(;e>8&&!(e%8);)e/=8;let r=0;for(;8*r*Math.log(2)/Math.log(t)<e;)r++;return[r,Math.ceil(8*r*Math.log(2)/Math.log(t))]}encode(t,e,r=!1,n=null){let i=this.bsEnc;0===i&&(i=t.byteLength);let s="";const o=i?(i-t.length%i)%i:0,a=new Array(o).fill(0);let h;r?(t.reverse(),h=[...a,...t]):h=[...t,...a];for(let t=0,r=h.length;t<r;t+=i){let r=0n;for(let e=t;e<t+i;e++)r=(r<<8n)+BigInt(h[e]);const a=new Array;let l,c=r;for(;c>=this.radix;)[c,l]=this.divmod(c,this.radix),a.unshift(parseInt(l,10));for(a.unshift(parseInt(c,10));a.length<this.bsDec;)a.unshift(0);let u="";a.forEach((t=>u=u.concat(e[t]))),n&&(u=n(u,o)),s=s.concat(u)}return[s,o]}decode(t,e,r=!1){if(!t)return new Uint8Array(0);let n=this.bsDec;const i=new Array;let s;if(t.split("").forEach((t=>{const r=e.indexOf(t);r>-1&&i.push(r)})),0===n)n=i.length;else{s=(n-i.length%n)%n;const t=new Array(s).fill(this.decPadVal);r?i.unshift(...t):i.push(...t)}let o=new Array;for(let t=0,e=i.length;t<e;t+=n){let e=0n;for(let r=0;r<n;r++)e+=BigInt(i[t+r])*this.pow(n-1-r);const r=new Array;let s,a=e;for(;a>=256;)[a,s]=this.divmod(a,256),r.unshift(parseInt(s,10));for(r.unshift(parseInt(a,10));r.length<this.bsEnc;)r.unshift(0);o=o.concat(r)}if(r){for(;!o[0];)o.shift();o.length||o.push(0),o.reverse()}else if(this.bsDec){const t=this.padChars(s);o.splice(o.length-t)}return Uint8Array.from(o)}padBytes(t){return Math.floor(t*this.bsDec/this.bsEnc)}padChars(t){return Math.ceil(t*this.bsEnc/this.bsDec)}pow(t){return BigInt(this.radix)**BigInt(t)}divmod(t,e){return[t,e]=[BigInt(t),BigInt(e)],[t/e,t%e]}}class r{constructor(t){this.root=t,"charsets"in t&&this.charsetUserToolsConstructor(),this.smartInput=new n,this.smartOutput=new i}charsetUserToolsConstructor(){this.root.addCharset=(t,e)=>{if("string"!=typeof t)throw new TypeError("The charset name must be a string.");const r=this.root.converter.radix;let n=r;if("string"==typeof e||Array.isArray(e))n=e.length,e=new Set(e);else if(!(e instanceof Set))throw new TypeError("The charset must be one of the types:\n'str', 'set', 'array'.");if(e.size!==r)throw n===r?new Error("There were repetitive chars found in your charset. Make sure each char is unique."):new Error(`The the length of the charset must be ${r}.`);e=[...e].join(""),this.root.charsets[t]=e,console.log(`New charset added with the name '${t}' added and ready to use`)},this.root.setDefaultVersion=t=>[this.root.version]=this.validateArgs([t])}makeArgList(t){return t.map((t=>`'${t}'`)).join(", ")}toSignedStr(t,e){return t=t.replace(/^0+(?!$)/,""),e&&(t="-".concat(t)),t}extractSign(t){let e=!1;return"-"===t[0]&&(e=!0,t=t.slice(1)),[t,e]}normalizeOutput(t){let e=2**Math.ceil(Math.log(t.byteLength)/Math.log(2));e=Math.max(e,2);const r=e-t.byteLength;if(r){const n=new Uint8Array(e);n.set(t,r),t=n}return t}negate(t){t.forEach(((e,r)=>t[r]=255^e));const e=t.byteLength-1;t[e]+=1}toSignedArray(t,e){return t=this.normalizeOutput(t),e&&this.negate(t),t}invalidArgument(t,e,r){const n=this.root.isMutable.signed?"\n * 'signed' to disable, 'unsigned', to enable the use of the twos's complement for negative integers":"",i=this.root.isMutable.littleEndian?"\n * 'be' for big , 'le' for little endian byte order for case conversion":"",s=this.root.isMutable.padding?"\n * 'pad' to fill up, 'nopad' to not fill up the output with the particular padding":"",o=this.root.isMutable.upper?"\n * valid args for changing the encoded output case are 'upper' and 'lower'":"",a=`\n * valid args for the output type are ${this.makeArgList(r)}`,h=e?`\n * the options for version (charset) are: ${this.makeArgList(e)}`:"";throw new TypeError(`'${t}'\n\nValid parameters are:${n}${i}${s}${o}${a}${h}\n\nTraceback:`)}validateArgs(t,e=!1){const r={version:this.root.version,signed:this.root.signed,littleEndian:this.root.littleEndian,padding:this.root.padding,outputType:"buffer"};if(!t.length)return r;const n=Object.keys(this.root.charsets),i=this.smartOutput.typeList,s={littleEndian:["be","le"],padding:["nopad","pad"],signed:["unsigned","signed"],upper:["lower","upper"]};if(t.forEach((t=>{if(t=String(t).toLowerCase(),n.includes(t))r.version=t;else if(i.includes(t))r.outputType=t;else{let e=!0;for(const n in s)if(s[n].includes(t)){if(e=!1,!this.root.isMutable[n])throw TypeError(`Argument '${t}' is not allowed for this type of converter.`);r[n]=Boolean(s[n].indexOf(t))}e&&this.invalidArgument(t,n,i)}})),r.padding&&r.signed&&(r.padding=!1,this.constructor.warning("Padding was set to false due to the signed conversion.")),e)for(const t in r)this.root[t]=r[t];return r}signError(){throw new TypeError("The input is signed but the converter is not set to treat input as signed.\nYou can pass the string 'signed' to the decode function or when constructing the converter.")}static warning(t){Object.prototype.hasOwnProperty.call(console,"warn")?console.warn(t):console.log(`___\n${t}\n`)}}class n{makeDataView(t){const e=new ArrayBuffer(t);return new DataView(e)}floatingPoints(t,e=!1){let r;if(t>12e-39&&t<34e37)r=this.makeDataView(4),r.setFloat32(0,t,e);else{if(!(t>23e-309&&t<17e307))throw new RangeError("Float is too complex to handle. Convert it to bytes manually before encoding.");r=this.makeDataView(8),r.setFloat64(0,t,e)}return r}numbers(t,e=!1){let r;if(Number.isInteger(t)){if(!Number.isSafeInteger(t)){let e,r,n;throw t<0?(e=Number.MIN_SAFE_INTEGER,r="smaller",n="MIN"):(e=Number.MAX_SAFE_INTEGER,r="bigger",n="MAX"),new RangeError(`The provided integer is ${r} than ${n}_SAFE_INTEGER: '${e}'\nData integrity is not possible. Use a BigInt to avoid this issue.`)}t<0?t<-2147483648?(r=this.makeDataView(8),r.setBigInt64(0,BigInt(t),e)):t<-32768?(r=this.makeDataView(4),r.setInt32(0,t,e)):(r=this.makeDataView(2),r.setInt16(0,t,e)):t>0?t>4294967295?(r=this.makeDataView(8),r.setBigUint64(0,BigInt(t),e)):t>65535?(r=this.makeDataView(4),r.setUint32(0,t,e)):(r=this.makeDataView(2),r.setInt16(0,t,e)):r=new Uint16Array([0])}else r=this.floatingPoints(t,e);return new Uint8Array(r.buffer)}bigInts(t,e=!1){const r=new Array,n=e?"push":"unshift";if(t>0){const e=18446744073709551616n;for(;t>=e;)r[n](t%e),t>>=64n}else if(t<0){const e=-9223372036854775808n;for(;t<=e;)r[n](t%e),t>>=64n}r[n](t);const i=8*r.length,s=new ArrayBuffer(i),o=new DataView(s);return r.forEach(((t,r)=>{const n=8*r;o.setBigUint64(n,t,e)})),new Uint8Array(o.buffer)}toBytes(t,e=!1,r=!1){let n,i=!1,s=!1;if(t instanceof ArrayBuffer)n=new Uint8Array(t),s=!0;else if(ArrayBuffer.isView(t))n=new Uint8Array(t.buffer),s=!0;else if("string"==typeof t||t instanceof String)n=(new TextEncoder).encode(t);else if("number"!=typeof t||isNaN(t)||t===1/0)if("bigint"==typeof t)e&&t<0&&(i=!0,t*=-1n),n=this.bigInts(t,r);else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const e=new Array;for(const r of t)e.push(...this.toBytes(r));n=Uint8Array.from(e)}}else e&&t<0&&(i=!0,t*=-1),n=this.numbers(t,r);return[n,i,s]}}class i{constructor(){this.typeList=this.constructor.validTypes()}getType(t){if(!this.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}makeTypedArrayBuffer(t,e,r){const n=t.byteLength,i=(e-t.byteLength%e)%e;let s=t;if(i){s=new Uint8Array(n+i);const e=r?i:0;s.set(t,e)}return s.buffer}makeTypedArray(t,e,r){let n;if("int16"===e||"uint16"===e){const i=this.makeTypedArrayBuffer(t,2,r);n="int16"===e?new Int16Array(i):new Uint16Array(i)}else if("int32"===e||"uint32"===e){const i=this.makeTypedArrayBuffer(t,4,r);n="int32"===e?new Int32Array(i):new Uint32Array(i)}else if("bigint64"===e||"biguint64"===e){const i=this.makeTypedArrayBuffer(t,8,r);n="bigint64"===e?new BigInt64Array(i):new BigUint64Array(i)}return n}compile(t,e,r=!1,n=!1){let i;if("buffer"===(e=this.getType(e)))i=t.buffer;else if("bytes"===e||"Uint8"===e)i=t;else if("int8"===e)i=new Int8Array(t.buffer);else if("view"===e)i=new DataView(t.buffer);else if("str"===e)i=(new TextDecoder).decode(t);else if("number"===e){i=t,r&&i.reverse();let e=0n;i.forEach((t=>e=(e<<8n)+BigInt(t))),i=e<Number.MAX_SAFE_INTEGER?Number(e):e,n&&(i=-i)}else i=this.makeTypedArray(t,e,r);return i}static validTypes(){return["bigint64","biguint64","buffer","bytes","int8","int16","int32","number","str","uint8","uint16","uint32","view"]}}return t.Base58=class{constructor(...t){this.charsets={default:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",bitcoin:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",flickr:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"},this.converter=new e(58,0,0),this.littleEndian=!1,this.outputType="buffer",this.padding=!0,this.signed=!1,this.upper=null,this.utils=new r(this),this.version="default",this.isMutable={littleEndian:!0,padding:!0,signed:!0,upper:!1},this.utils.validateArgs(t,!0)}encode(t,...e){const r=this.utils.validateArgs(e);let n,i,s;if([n,,i]=this.utils.smartInput.toBytes(t,r.signed,r.littleEndian),r.padding&&i){let t=0,e=0;for(;!n[t];)e++,t++;s=this.converter.encode(n,this.charsets[r.version])[0],e&&(s="1".repeat(e).concat(s))}else s=this.converter.encode(n,this.charsets[r.version])[0];return s}decode(t,...e){const r=this.utils.validateArgs(e);let n;if(t=String(t),r.padding){let e=0,i=0;for(;"1"===t[e];)i++,e++;n=this.converter.decode(t,this.charsets[r.version]),i&&(n=Uint8Array.from([...new Array(i).fill(0),...n]))}else n=this.converter.decode(t,this.charsets[r.version]);return this.utils.smartOutput.compile(n,r.outputType)}},Object.defineProperty(t,"__esModule",{value:!0}),t}({});
